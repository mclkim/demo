package com.example.demo.login;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class CustomAuthenticationManager implements AuthenticationManager {

    @Autowired
    // private UserDetailsService userDetailsService;
    private UserDetailsServiceImpl userDetailsService;

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        // 이라인이 아이디, 비번으로 유저정보를 조회합니다(구현하셔야합니다, 디비에 회원정보가 있다면 조회하는 로직이 들어가는 것이죠)
        UserDetails userDetails = userDetailsService.loadUserByUsername(authentication.getName());
        // 다음에 올바로 조회 되지 았았다면 예외를 발생시키는 로직을 추가합니다
        // 그렇게 되면 CustomAuthenticationFailureHandler 구현하여 등록시키면 이 클래스에 설정된 로그인 오류 안내
        // 페이지로 이동하게 됩니다.
        if (userDetails == null)
            throw new BadCredentialsException("1000");

        // 세션을 따로 저장하는 것이 아닙니다 UsernamePasswordAuthenticationToken 클래스에 유저정보로 객체를 생성하여
        // 리턴하면 세션에 저장됩니다
        // 아마도 임의 로 세션에 따로 저장을 하였기 때문에 재부팅을 해도 남아 아 있는것으로 추정되네요
        return new UsernamePasswordAuthenticationToken(userDetails.getUsername(), userDetails.getPassword(),
                userDetails.getAuthorities());
    }
}